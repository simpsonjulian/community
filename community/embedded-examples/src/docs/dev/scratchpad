This document will guide you through your very first Neo4j application.
It assumes that you're familiar with Java development and with the basic Neo4j 
and graph database concepts (for example, as described on the [http://neo4j.org Neo4j front page]).
If you're <i>not</i> familiar with Java development, see the [[Java Setup HowTo]].

= Using Neo4j embedded from Java =

The whole tutorial will take roughly 10 minutes out of your life;
at the end, you will have written, compiled,
and run a simple but complete "hello world"-like application based on Neo4j.
If you're impatient, check out the compressed [[Getting Started In One Minute Guide]].

If you would like to get some commonly used Neo4j components bundled right away,
check out the [[Getting Started With Neo4j]] guide before moving on.

Let's get started!

== Download the jar file and add it to your classpath ==

=== If you use Maven ===

If you use [http://maven.apache.org Maven2], simply add Neo4j as a dependency in your POM.
In your <code>pom.xml</code>, add the following:

<pre class="brush: xml">
<project>
...
   <dependencies>
      <dependency>
         <groupId>org.neo4j</groupId>
         <artifactId>neo4j</artifactId>
         <version>1.3</version>
      </dependency>
      ...
   </dependencies>
...
</project>
</pre>

See also a [[Complete Pom Example|complete example]].

The components are available from maven central, so you can always browse [http://search.maven.org/#search|ga|1|g%3A%22org.neo4j%22 there] to see what's available,

Also, note that there is a separate snapshot repository:
* [http://m2.neo4j.org/snapshots/ http://m2.neo4j.org/snapshots/]

The book [http://www.exist.com/better-build-maven Better Builds with Maven] is a good starting point
if you want to begin using Maven, but find the official documentation overwhelming.

=== If you don't use Maven (or any other dependency resolution system) ===

First, download the latest Neo4j distribution from the [http://neo4j.org/download/ download page].
Second, add all the jars to your <code>classpath</code> in the appropriate manner for your environment:

* Ant: add to a <code>lib/</code> dir
* Eclipse: right-click and ''add to build path''
* JDK tools: append to <code>-classpath</code>

Neo4j has a dependency on the Java Transaction API and other third-party libraries. Be sure to add all of the jars in the lib directory of the distribution.

This step is completed when you can import classes
from the <code>org.neo4j.graphdb</code> package without any compilation errors.

=== If you use Ivy or Gradle ===

[http://ant.apache.org/ivy/ Ivy] and [http://gradle.org/ Gradle] don't support resolving repositories that are referenced in the pom.xml files.

For Ivy, add the repositories to your ivysettings.xml project file with something like:

<pre class="brush: xml">
<ivysettings>
  <settings defaultResolver="main"/>
  <resolvers>
    <chain name="main">
      <filesystem name="local">
        <artifact pattern="${ivy.settings.dir}/repository/[artifact]-[revision].[ext]" />
      </filesystem>
      <ibiblio name="maven_central" root="http://repo1.maven.org/maven2/" m2compatible="true"/>
    </chain>
  </resolvers>
</ivysettings>
</pre>

In Gradle, adding these repositories would look like this:

<pre class="brush: plain">
apply plugin: 'java'
repositories {
   mavenCentral()
}
dependencies {
   compile 'org.neo4j:neo4j:1.3'
}
</pre>

== Initialize and start an EmbeddedGraphDatabase instance ==

Neo4j is an embedded database, which means that it runs in the same JVM as your application.
You start the Neo4j database by creating an instance of the ''EmbeddedGraphDatabase'' class.
The EmbeddedGraphDatabase constructor takes an argument of a directory for storing data files.
The directory is simply a string defining a directory relative to the JVM's current working directory.
It will be created if it doesn't already exist.

Remember, from the introduction, that a Neo4j graph consists of three basic elements:

* nodes
* relationships that connect nodes
* properties attached to both nodes and relationships

All relationships have a ''type''.
For example, if the graph represents a social network, a relationship type could be '''KNOWS'''.
If a relationship of the type '''KNOWS''' connects two nodes,
that probably represents two people that know each other.
A lot of the semantics (ie, the meaning) of a graph
is encoded in the relationship types of the application.
And although relationships are directed they are equally well
traversed regardless of which direction they are traversed.

For our small example, we need only one relationship type.
Here's how we define it:

<pre class="brush: java">
public enum MyRelationshipTypes implements RelationshipType
{
    KNOWS
}
</pre>

Then we should embed Neo4j into our application as follows:

<pre class="brush: java">
GraphDatabaseService graphDb = new EmbeddedGraphDatabase( "var/graphdb" );
</pre>

When the constructor returns, Neo4j has started
and immediately loaded the data files in the directory "var/graphdb"
(if the directory doesn't exist, Neo4j will create and initialize it). 
All we need to remember is to ''shutdown Neo4j before exiting'':

<pre class="brush: java">
graphDb.shutdown();
</pre>

== Wrap everything in a transaction ==

Are we set to go? Not yet.

In Neo4j any mutating interaction with the graph has to be part of a transaction.
This is a conscious design decision, since we believe transaction demarcation
to be an important part of working with a real enterprise database.
Now, transaction handling in Neo4j is very easy:

<pre class="brush: java">
Transaction tx = graphDb.beginTx();
try
{
   // all Neo4j operations that work with the graph
   // ...
   tx.success();
}
finally
{
   tx.finish();
}
</pre>

See [[Transactions#The basics|more information about transactions]].

We're set to go!

== Create a small graph ==

Now, let's create a few nodes.
The API is very intuitive.
Feel free to have a look at the current milestone javadocs at http://components.neo4j.org/neo4j-examples/{{Neo4j-Version}}/apidocs/
(they're included in the distribution, as well).
Here's how to create a small graph consisting of two nodes,
connected with one relationship and some properties:

<pre class="brush: java">
Node firstNode = graphDb.createNode();
Node secondNode = graphDb.createNode();
Relationship relationship = firstNode.createRelationshipTo( secondNode, MyRelationshipTypes.KNOWS );

firstNode.setProperty( "message", "Hello, " );
secondNode.setProperty( "message", "world!" );
relationship.setProperty( "message", "brave Neo4j " );
</pre>

We now have a graph that looks like this:

<pre class="brush: plain">
(firstNode )---KNOWS--->(secondNode)
</pre>

== Print the result ==

After we've created our graph, let's read from it and print the result.

<pre class="brush: java">
System.out.print( firstNode.getProperty( "message" ) );
System.out.print( relationship.getProperty( "message" ) );
System.out.print( secondNode.getProperty( "message" ) );
</pre>

Running this code will give the following output:

<pre class="brush: plain">
Hello, brave Neo4j world!
</pre>

== Conclusion ==

Ok, our 10 minutes are up!
The full source code for this short example is [[One Minute Guide Complete Code|here]].
Now you are familiar with how to build a graph -- one of the two fundamentals of Neo4j
(the other being the [[Traversal|traverser framework]]).
How to proceed from here?

* Your next stop is definitely the [http://dist.neo4j.org/basic-neo4j-code-examples-2008-05-08.pdf basic code snippets PDF] (old API), which through a few slides will give you a code-level introduction to the traverser framework.

* Learn about how to do use the [[Index Framework|integrated index API]], for doing indexing and lookup of nodes and relationships.

* There are some articles linked to from http://neo4j.org/doc that introduce the high level concepts of Neo4j. They're from 2 to 8 pages and they do a pretty good job of putting the concepts into perspective but also include some source code level details.

* The [[Shell]] is an interactive command-line tool for browsing the graph. Very useful during development! Check out the [[Shell|Shell guide]].

* Sign up to the [http://lists.neo4j.org mailing list] and ask questions. We love questions, particularly from Neo4j newcomers!

* Lastly, the [[Main Page]] tries to gather most of our documentation in one place.

